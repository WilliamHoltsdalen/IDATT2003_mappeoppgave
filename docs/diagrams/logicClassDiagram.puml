@startuml

top to bottom direction

class App {
  + App():
  + main(String[]): void
}
class BoardFactory {
  - BoardFactory():
  - createClassicBoard(): Board
  - createPortalBoard(): Board
  - createTiles(int, int): List<Tile>
  + createBoardFromFile(String): Board
  + createBoard(String): Board
}
class BoardFileHandlerGson {
  + BoardFileHandlerGson():
  - TILE_ACTION_DESTINATION_TILE_ID_PROPERTY: String
  - TILE_ACTION_DESCRIPTION_PROPERTY: String
  - TILE_NEXT_TILE_ID_PROPERTY: String
  - TILE_ACTION_PROPERTY: String
  - NAME_PROPERTY: String
  - TILE_ACTION_TYPE_PROPERTY: String
  - DESCRIPTION_PROPERTY: String
  - TILES_PROPERTY: String
  - TILE_ID_PROPERTY: String
  + readFile(String): List<Board>
  + writeFile(String, List<Board>): void
  - serializeBoard(Board): JsonObject
  - deserializeBoard(String): Board
}
interface BoardGameObserver << interface >> {
  + onPlayerMoved(Player, int): void
  + onGameStateChanged(String): void
  + onGameFinished(Player): void
}
interface FileHandler<T> << interface >> {
  + readFile(String): List<T>
  + writeFile(String, List<T>): void
}
class GameController {
  + GameController():
  - boardGame: BoardGame
  - boardVariants: Map<Integer, Board>
  - getCurrentPlayer(): Player
  + setBoardVariant(int): void
  + getWinner(): Player
  + initController(): void
  - loadBoardVariants(List<String>): void
  + updateCurrentPlayer(): void
  + rollDiceAndMovePlayer(Player): void
  - getBoard(): Board
  - findNextTile(Player, int): Tile
  - handleRoundNumber(): void
  + getRoundNumber(): int
  + performPlayerMove(): void
  + getPlayers(): List<Player>
  - handleTileAction(Player): void
  + getBoardVariants(): Map<Integer, Board>
  + setPlayers(List<Player>): void
  - getDice(): Dice
  + initGame(): void
  + loadPlayersFromFile(String): boolean
}
class InterfaceUtils {
  - InterfaceUtils():
  - scanner: Scanner
  + exitApplication(): void
  + printSpacing(): void
  + printErrorMessage(String): void
  + printGoodbyeMessage(): void
  + printGameClientMenu(): void
  + exitByError(String): void
  + printWelcomeMessage(): void
  + stringInput(): String
  + integerInput(): int
}
class PlayerFactory {
  - PlayerFactory():
  - DEFAULT_BOT_COLOR: String
  + createPlayersFromFile(String): List<Player>
  + createBot(String): Player
  + createPlayer(String, String): Player
}
class PlayerFileHandlerGson {
  + PlayerFileHandlerGson():
  + readFile(String): List<Player>
  - fromCsvLine(String): Player?
  - toCsvLine(Player): String
  + writeFile(String, List<Player>): void
}
class TextUserInterface {
  + TextUserInterface():
  - gameController: GameController
  - userSelectBoard(): void
  + run(): void
  - userCreateBots(): List<Player>
  - userSelectPlayers(): void
  - userImportPlayers(): void
  - printRoundNumber(): void
  + init(): void
  - tuiMainMenu(): void
  - tuiGameClient(): void
  - printWinner(): void
  - userCreatePlayers(): void
}

App                    -[#595959,dashed]->  TextUserInterface     : "«create»"
BoardFactory           -[#595959,dashed]->  BoardFileHandlerGson  : "«create»"
BoardFileHandlerGson   -[#008200,dashed]-^  FileHandler
PlayerFactory          -[#595959,dashed]->  PlayerFileHandlerGson : "«create»"
PlayerFileHandlerGson  -[#008200,dashed]-^  FileHandler
TextUserInterface     "1" *-[#595959,plain]-> "gameController\n1" GameController
TextUserInterface      -[#595959,dashed]->  GameController        : "«create»"
@enduml
